string orcCB_OrchestraSegmentName = null

string orcCB_GetOrchestraSegmentName() {
	OleAutoObj segmentNameObject = oleCreateAutoObject("Orchestra.VariableManager")
	string sRetour
	string sError
	OleAutoArgs autoArgs = create
	put(autoArgs, "\\Orchestra\\Segment")
	sError = oleMethod(segmentNameObject, "GetVariableSeparatedBySemicolons", autoArgs, sRetour)
	delete(autoArgs)
	oleCloseAutoObject(segmentNameObject)
	if (sError == null && sRetour != null)
	{
		return sRetour
	}
	else
	{
		return "Gold"
	}
}

orcCB_OrchestraSegmentName = orcCB_GetOrchestraSegmentName()

int OrchestraLMInstalled_()
{
	if (orcCB_OrchestraSegmentName != null && orcCB_OrchestraSegmentName == "Silver")
	{
		return menuUnavailable_
	}
	return menuAvailable_
}

int forProjectManagerOnly_Papeete() {
	return OrchestraLMInstalled_()
}

int inASurrogateModule() { //Need for migration to the LM
	Module m = current
	AttrDef atDef
	string strPrefix
	int intRetour = menuInvisible_

	atDef = find(m, "Papeete Module Type")

	if (!null atDef) {
		strPrefix = m."Papeete Module Type"
		if (strPrefix == "PapeeteSurrogateModule") {
			intRetour = menuAvailable_
		}
	}
	return intRetour
}

int Orchestra_needsFolderSelected_()
{
	Skip selectedItems = getSelectedItems()
	Item selectedItem
	int n = 0
	int intRetour = menuUnavailable_
	string sType = null

	for selectedItem in selectedItems do{
		if (n > 0) {
			intRetour = menuUnavailable_
			break
		}
		sType = type(selectedItem)
		if (sType == "Folder" || sType == "Project") {
			intRetour = menuAvailable_
		}
		n++
	}
	delete selectedItems
	return intRetour
}

int Orchestra_needsModifyAccessOnCurrentProject() {
	Project currentProject = current
	int intRetour = menuUnavailable_
	if (!null currentProject) {
		Folder f = folder(fullName(currentProject))
		if (canModify(f)) {
			intRetour = menuAvailable_
		}
	}
	return intRetour
}

int Orchestra_needsModifyAccessOnSelectedProject() {
	Skip selectedItems = getSelectedItems()
	Item selectedItem
	int n = 0
	int intRetour = menuInvisible_
	string sType = null
	
	for selectedItem in selectedItems do{
		if (n > 0) {
			break
		}
		sType = type(selectedItem)
		if (sType == "Project" && canModify(selectedItem)) {
			intRetour = menuAvailable_
		}
		n++
	}
	delete selectedItems
	return intRetour
}

int Orchestra_ProjectIsDeclaredInOrchestra() {
	Project currentProject = current
	int intRetour = menuUnavailable_
	if (!null currentProject) {
		Trigger t
		string ocb_s = ""
		for t in currentProject do {
			ocb_s = name(t)
			if (matches("Orchestra:Orchestra Module Id Feature", ocb_s)) {
				intRetour = menuAvailable_
				break
			}
		}
		string sCacheID = getDatabaseIdentifier()"." uniqueID(currentProject)
		if (intRetour == menuAvailable_) {
			ocb_s = fullName(currentProject) "/Orchestra Configuration/Orchestra Cache " sCacheID
			if (!module(ocb_s) || isDeleted(item(ocb_s))) {
				intRetour = menuUnavailable_
			}
		}
	}
	return intRetour
}

