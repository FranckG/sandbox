/**
 * Copyright (c) THALES, 2011. All rights reserved.
 */
package com.thalesgroup.orchestra.framework.remote.services.context.serialization;

import java.text.MessageFormat;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.core.runtime.IStatus;

import com.thalesgroup.orchestra.framework.lib.utils.uri.OrchestraURI;

/**
 * Remote services serialization helper.
 * @author t0076261
 */
@SuppressWarnings("nls")
public class SerializationHelper {
  /**
   * Serialize specified status to a {@link String}.
   * @param status_p A not <code>null</code> {@link IStatus} to serialize.
   * @return The string representation of specified status. <code>null</code> if parameters are invalid, or an error occurred.
   */
  public String serializeStatus(IStatus status_p) {
    // Precondition.
    if (null == status_p) {
      return null;
    }
    return encodeStatus(status_p, null);
  }

  /**
   * Encode specified status.
   * @param status_p The status to encode, including its children.
   * @param parentId_p The id of the parent status, if any, as generated by this method (<code>null</code> for a root status).
   * @return A not <code>null</code> string serialization of specified status.
   */
  protected String encodeStatus(IStatus status_p, String parentId_p) {
    // Create id.
    String id = "" + status_p.hashCode();
    // Add it to resulting string.
    StringBuilder result = new StringBuilder();
    // Add separator, if needed.
    if (null != parentId_p) {
      result.append('|');
    }
    // Add id
    result.append(MessageFormat.format("Id={0}", OrchestraURI.encode(id)));
    // Add severity.
    result.append('&').append(MessageFormat.format("Severity={0}", OrchestraURI.encode("" + status_p.getSeverity())));
    // Add message, if any.
    String message = status_p.getMessage();
    if ((null != message) && (0 < message.trim().length())) {
      result.append('&').append(MessageFormat.format("Message={0}", OrchestraURI.encode(message)));
    }
    // Add reference to parent, if any.
    if (null != parentId_p) {
      result.append('&').append(MessageFormat.format("ParentId={0}", OrchestraURI.encode(parentId_p)));
    }
    // Add children, if any.
    if (status_p.isMultiStatus()) {
      // Add them to resulting string.
      for (IStatus childStatus : status_p.getChildren()) {
        result.append(encodeStatus(childStatus, id));
      }
    }
    return result.toString();
  }

  /**
   * De-serialize specified status.
   * @param statusAsString_p A not <code>null</code> string representation of a status, children included.
   * @return The de-serialized status, or <code>null</code> if parameters are invalid, or an error occurred.
   */
  public IStatus deserializeStatus(String statusAsString_p) {
    // Precondition.
    if (null == statusAsString_p) {
      return null;
    }
    // Status id to deserialized status.
    Map<String, DeserializedStatus> idToStatus = new HashMap<String, DeserializedStatus>(0);
    DeserializedStatus rootStatus = null;
    // Split on statuses separator first.
    String[] statuses = statusAsString_p.split("\\|");
    for (String statusAsString : statuses) {
      // Split on attributes.
      Map<String, String> attributeToValue = new HashMap<String, String>(0);
      String[] attributesAsString = statusAsString.split("&");
      for (String attributeAsString : attributesAsString) {
        // Split on value separator.
        String[] attributesAndValues = attributeAsString.split("=");
        // Fill attributes map.
        for (int i = 0; i < attributesAndValues.length - 1; i += 2) {
          attributeToValue.put(attributesAndValues[i], attributesAndValues[i + 1]);
        }
      }
      // Then create status.
      {
        // Get ID.
        String id = OrchestraURI.decode(attributeToValue.get("Id"));
        if (null == id) {
          // Ignore invalid status.
          continue;
        }
        // Get severity.
        int severity = new Integer(OrchestraURI.decode(attributeToValue.get("Severity"))).intValue();
        // Get message.
        String message = OrchestraURI.decode(attributeToValue.get("Message"));
        // Create status.
        DeserializedStatus status = new DeserializedStatus(severity, message);
        // Retain status.
        idToStatus.put(id, status);
        // Get parent ID.
        String parentId = OrchestraURI.decode(attributeToValue.get("ParentId"));
        // Retain root status.
        if (null == parentId) {
          rootStatus = status;
        } else {
          // Link child status to its parent.
          DeserializedStatus parent = idToStatus.get(parentId);
          if (null != parent) {
            parent.addChild(status);
          }
        }
      }
    }
    return rootStatus;
  }
}