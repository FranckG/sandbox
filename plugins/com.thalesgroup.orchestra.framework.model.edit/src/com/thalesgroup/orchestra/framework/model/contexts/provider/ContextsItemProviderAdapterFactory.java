/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.thalesgroup.orchestra.framework.model.contexts.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import com.thalesgroup.orchestra.framework.model.contexts.util.ContextsAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated
 */
public class ContextsItemProviderAdapterFactory extends ContextsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
  /**
   * This keeps track of the one adapter used for all {@link com.thalesgroup.orchestra.framework.model.contexts.Category} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CategoryItemProvider categoryItemProvider;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of the one adapter used for all {@link com.thalesgroup.orchestra.framework.model.contexts.Context} instances.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  protected ContextItemProvider contextItemProvider;

  /**
   * This keeps track of the one adapter used for all {@link com.thalesgroup.orchestra.framework.model.contexts.ContributedElement} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected ContributedElementItemProvider contributedElementItemProvider;

  /**
   * This keeps track of the one adapter used for all {@link com.thalesgroup.orchestra.framework.model.contexts.EnvironmentVariable} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected EnvironmentVariableItemProvider environmentVariableItemProvider;

  /**
   * This keeps track of the one adapter used for all {@link com.thalesgroup.orchestra.framework.model.contexts.EnvironmentVariableValue} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected EnvironmentVariableValueItemProvider environmentVariableValueItemProvider;

  /**
   * This keeps track of the one adapter used for all {@link com.thalesgroup.orchestra.framework.model.contexts.FileVariable} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FileVariableItemProvider fileVariableItemProvider;

  /**
   * This keeps track of the one adapter used for all {@link com.thalesgroup.orchestra.framework.model.contexts.FolderVariable} instances.
   * <!-- begin-user-doc
   * --> <!-- end-user-doc -->
   * @generated
   */
  protected FolderVariableItemProvider folderVariableItemProvider;

  /**
   * This keeps track of the one adapter used for all {@link com.thalesgroup.orchestra.framework.model.contexts.InstallationCategory} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected InstallationCategoryItemProvider installationCategoryItemProvider;

  /**
   * This keeps track of the one adapter used for all {@link com.thalesgroup.orchestra.framework.model.contexts.OverridingVariable} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected OverridingVariableItemProvider overridingVariableItemProvider;

  /**
   * This keeps track of the one adapter used for all {@link com.thalesgroup.orchestra.framework.model.contexts.OverridingVariableValue} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected OverridingVariableValueItemProvider overridingVariableValueItemProvider;

  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This keeps track of the one adapter used for all {@link com.thalesgroup.orchestra.framework.model.contexts.PendingElementsCategory} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected PendingElementsCategoryItemProvider pendingElementsCategoryItemProvider;

  /**
   * This keeps track of the one adapter used for all {@link com.thalesgroup.orchestra.framework.model.contexts.ReferenceableElement} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected ReferenceableElementItemProvider referenceableElementItemProvider;

  /**
   * This keeps track of the one adapter used for all {@link com.thalesgroup.orchestra.framework.model.contexts.ReferencingElement} instances. <!--
   * begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected ReferencingElementItemProvider referencingElementItemProvider;

  /**
   * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected StringToStringMapItemProvider stringToStringMapItemProvider;

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This keeps track of the one adapter used for all {@link com.thalesgroup.orchestra.framework.model.contexts.Variable} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected VariableItemProvider variableItemProvider;

  /**
   * This keeps track of the one adapter used for all {@link com.thalesgroup.orchestra.framework.model.contexts.VariableValue} instances.
   * <!-- begin-user-doc
   * --> <!-- end-user-doc -->
   * @generated
   */
  protected VariableValueItemProvider variableValueItemProvider;

  /**
   * This constructs an instance.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public ContextsItemProviderAdapterFactory() {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type) {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type) {
    if (isFactoryForType(type)) {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This creates an adapter for a {@link com.thalesgroup.orchestra.framework.model.contexts.Category}.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCategoryAdapter() {
    if (categoryItemProvider == null) {
      categoryItemProvider = new CategoryItemProvider(this);
    }

    return categoryItemProvider;
  }

  /**
   * This creates an adapter for a {@link com.thalesgroup.orchestra.framework.model.contexts.Context}.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContextAdapter() {
    if (contextItemProvider == null) {
      contextItemProvider = new ContextItemProvider(this);
    }

    return contextItemProvider;
  }

  /**
   * This creates an adapter for a {@link com.thalesgroup.orchestra.framework.model.contexts.ContributedElement}.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContributedElementAdapter() {
    if (contributedElementItemProvider == null) {
      contributedElementItemProvider = new ContributedElementItemProvider(this);
    }

    return contributedElementItemProvider;
  }

  /**
   * This creates an adapter for a {@link com.thalesgroup.orchestra.framework.model.contexts.EnvironmentVariable}.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEnvironmentVariableAdapter() {
    if (environmentVariableItemProvider == null) {
      environmentVariableItemProvider = new EnvironmentVariableItemProvider(this);
    }

    return environmentVariableItemProvider;
  }

  /**
   * This creates an adapter for a {@link com.thalesgroup.orchestra.framework.model.contexts.EnvironmentVariableValue}.
   * <!-- begin-user-doc --> <!--
   * end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createEnvironmentVariableValueAdapter() {
    if (environmentVariableValueItemProvider == null) {
      environmentVariableValueItemProvider = new EnvironmentVariableValueItemProvider(this);
    }

    return environmentVariableValueItemProvider;
  }

  /**
   * This creates an adapter for a {@link com.thalesgroup.orchestra.framework.model.contexts.FileVariable}.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFileVariableAdapter() {
    if (fileVariableItemProvider == null) {
      fileVariableItemProvider = new FileVariableItemProvider(this);
    }

    return fileVariableItemProvider;
  }

  /**
   * This creates an adapter for a {@link com.thalesgroup.orchestra.framework.model.contexts.FolderVariable}.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFolderVariableAdapter() {
    if (folderVariableItemProvider == null) {
      folderVariableItemProvider = new FolderVariableItemProvider(this);
    }

    return folderVariableItemProvider;
  }

  /**
   * This creates an adapter for a {@link com.thalesgroup.orchestra.framework.model.contexts.InstallationCategory}. <!-- begin-user-doc --> <!-- end-user-doc
   * -->
   * @generated
   */
  @Override
  public Adapter createInstallationCategoryAdapter() {
    if (installationCategoryItemProvider == null) {
      installationCategoryItemProvider = new InstallationCategoryItemProvider(this);
    }

    return installationCategoryItemProvider;
  }

  /**
   * This creates an adapter for a {@link com.thalesgroup.orchestra.framework.model.contexts.OverridingVariable}.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOverridingVariableAdapter() {
    if (overridingVariableItemProvider == null) {
      overridingVariableItemProvider = new OverridingVariableItemProvider(this);
    }

    return overridingVariableItemProvider;
  }

  /**
   * This creates an adapter for a {@link com.thalesgroup.orchestra.framework.model.contexts.OverridingVariableValue}. <!-- begin-user-doc --> <!-- end-user-doc
   * -->
   * @generated
   */
  @Override
  public Adapter createOverridingVariableValueAdapter() {
    if (overridingVariableValueItemProvider == null) {
      overridingVariableValueItemProvider = new OverridingVariableValueItemProvider(this);
    }

    return overridingVariableValueItemProvider;
  }

  /**
   * This creates an adapter for a {@link com.thalesgroup.orchestra.framework.model.contexts.PendingElementsCategory}. <!-- begin-user-doc --> <!-- end-user-doc
   * -->
   * @generated
   */
  @Override
  public Adapter createPendingElementsCategoryAdapter() {
    if (pendingElementsCategoryItemProvider == null) {
      pendingElementsCategoryItemProvider = new PendingElementsCategoryItemProvider(this);
    }

    return pendingElementsCategoryItemProvider;
  }

  /**
   * This creates an adapter for a {@link com.thalesgroup.orchestra.framework.model.contexts.ReferenceableElement}. <!-- begin-user-doc --> <!-- end-user-doc
   * -->
   * @generated
   */
  @Override
  public Adapter createReferenceableElementAdapter() {
    if (referenceableElementItemProvider == null) {
      referenceableElementItemProvider = new ReferenceableElementItemProvider(this);
    }

    return referenceableElementItemProvider;
  }

  /**
   * This creates an adapter for a {@link com.thalesgroup.orchestra.framework.model.contexts.ReferencingElement}.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createReferencingElementAdapter() {
    if (referencingElementItemProvider == null) {
      referencingElementItemProvider = new ReferencingElementItemProvider(this);
    }

    return referencingElementItemProvider;
  }

  /**
   * This creates an adapter for a {@link java.util.Map.Entry}.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createStringToStringMapAdapter() {
    if (stringToStringMapItemProvider == null) {
      stringToStringMapItemProvider = new StringToStringMapItemProvider(this);
    }

    return stringToStringMapItemProvider;
  }

  /**
   * This creates an adapter for a {@link com.thalesgroup.orchestra.framework.model.contexts.Variable}.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createVariableAdapter() {
    if (variableItemProvider == null) {
      variableItemProvider = new VariableItemProvider(this);
    }

    return variableItemProvider;
  }

  /**
   * This creates an adapter for a {@link com.thalesgroup.orchestra.framework.model.contexts.VariableValue}.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createVariableValueAdapter() {
    if (variableValueItemProvider == null) {
      variableValueItemProvider = new VariableValueItemProvider(this);
    }

    return variableValueItemProvider;
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void dispose() {
    if (categoryItemProvider != null) categoryItemProvider.dispose();
    if (contextItemProvider != null) contextItemProvider.dispose();
    if (variableItemProvider != null) variableItemProvider.dispose();
    if (fileVariableItemProvider != null) fileVariableItemProvider.dispose();
    if (folderVariableItemProvider != null) folderVariableItemProvider.dispose();
    if (overridingVariableItemProvider != null) overridingVariableItemProvider.dispose();
    if (variableValueItemProvider != null) variableValueItemProvider.dispose();
    if (pendingElementsCategoryItemProvider != null) pendingElementsCategoryItemProvider.dispose();
    if (overridingVariableValueItemProvider != null) overridingVariableValueItemProvider.dispose();
    if (installationCategoryItemProvider != null) installationCategoryItemProvider.dispose();
    if (contributedElementItemProvider != null) contributedElementItemProvider.dispose();
    if (referenceableElementItemProvider != null) referenceableElementItemProvider.dispose();
    if (referencingElementItemProvider != null) referencingElementItemProvider.dispose();
    if (environmentVariableValueItemProvider != null) environmentVariableValueItemProvider.dispose();
    if (environmentVariableItemProvider != null) environmentVariableItemProvider.dispose();
    if (stringToStringMapItemProvider != null) stringToStringMapItemProvider.dispose();
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification) {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null) {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory() {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type) {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc --> <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
    this.parentAdapterFactory = parentAdapterFactory;
  }
}